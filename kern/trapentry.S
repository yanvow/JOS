/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)                                          \
        .globl name;            /* define global symbol for 'name' */   \
        .type name, @function;  /* symbol type is function */           \
        .align 2;               /* align function definition */         \
        name:                   /* function starts here */              \
        pushl $(num);                                                   \
        jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)                                     \
        .globl name;                                                    \
        .type name, @function;                                          \
        .align 2;                                                       \
        name:                                                           \
        pushl $0;                                                       \
        pushl $(num);                                                   \
        jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
TRAPHANDLER_NOEC(TRAP_DIVIDE, T_DIVIDE)
TRAPHANDLER_NOEC(TRAP_DEBUG, T_DEBUG)
TRAPHANDLER_NOEC(TRAP_BRKPT, T_BRKPT)
TRAPHANDLER_NOEC(TRAP_OFLOW, T_OFLOW)
TRAPHANDLER_NOEC(TRAP_BOUND, T_BOUND)
TRAPHANDLER_NOEC(TRAP_ILLOP, T_ILLOP)
TRAPHANDLER_NOEC(TRAP_DEVICE, T_DEVICE)
TRAPHANDLER(TRAP_DBLFLT, T_DBLFLT)
TRAPHANDLER(TRAP_TSS, T_TSS)
TRAPHANDLER(TRAP_SEGNP, T_SEGNP)
TRAPHANDLER(TRAP_STACK, T_STACK)
TRAPHANDLER(TRAP_GPFLT, T_GPFLT)
TRAPHANDLER(TRAP_PGFLT, T_PGFLT)
TRAPHANDLER_NOEC(TRAP_FPERR, T_FPERR)
TRAPHANDLER_NOEC(TRAP_SYSCALL, T_SYSCALL)
TRAPHANDLER_NOEC(TRAP_NMI, T_NMI)
TRAPHANDLER(TRAP_ALIGN, T_ALIGN)
TRAPHANDLER_NOEC(TRAP_MCHK, T_MCHK)
TRAPHANDLER_NOEC(TRAP_SIMDERR, T_SIMDERR)
TRAPHANDLER_NOEC(TRAP_DEFAULT, T_DEFAULT)
TRAPHANDLER_NOEC(IRQ_0, IRQ_OFFSET + 0)
TRAPHANDLER_NOEC(IRQ_1, IRQ_OFFSET + 1)
TRAPHANDLER_NOEC(IRQ_2, IRQ_OFFSET + 2)
TRAPHANDLER_NOEC(IRQ_3, IRQ_OFFSET + 3)
TRAPHANDLER_NOEC(IRQ_4, IRQ_OFFSET + 4)
TRAPHANDLER_NOEC(IRQ_5, IRQ_OFFSET + 5)
TRAPHANDLER_NOEC(IRQ_6, IRQ_OFFSET + 6)
TRAPHANDLER_NOEC(IRQ_7, IRQ_OFFSET + 7)
TRAPHANDLER_NOEC(IRQ_8, IRQ_OFFSET + 8)
TRAPHANDLER_NOEC(IRQ_9, IRQ_OFFSET + 9)
TRAPHANDLER_NOEC(IRQ_10, IRQ_OFFSET + 10)
TRAPHANDLER_NOEC(IRQ_11, IRQ_OFFSET + 11)
TRAPHANDLER_NOEC(IRQ_12, IRQ_OFFSET + 12)
TRAPHANDLER_NOEC(IRQ_13, IRQ_OFFSET + 13)
TRAPHANDLER_NOEC(IRQ_14, IRQ_OFFSET + 14)
TRAPHANDLER_NOEC(IRQ_15, IRQ_OFFSET + 15)
TRAPHANDLER_NOEC(IRQ_TIMER_, IRQ_OFFSET + IRQ_TIMER);
TRAPHANDLER_NOEC(IRQ_KDB_, IRQ_OFFSET + IRQ_KBD);
TRAPHANDLER_NOEC(IRQ_SERIAL_, IRQ_OFFSET + IRQ_SERIAL);


/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
        pushl %ds
        pushl %es
	pushal

        movl $GD_KD, %eax
	movw %ax, %ds
	movw %ax, %es
        
        pushl %esp
        call trap
